{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","label","src","image","alt","length","substring","source","Link","to","pathname","state","APP_KEY","App","e","a","async","recipeName","target","elements","value","preventDefault","fetch","api_call","json","data","setState","hits","console","log","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","this","Component","Recipe","activeRecipe","title","location","req","res","href","url","React","Router","HashRouter","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76ad239a.chunk.js","sourcesContent":["import React from 'react';\n\n// a stateless functional component\nconst Form = props => (\n    <form onSubmit={props.getRecipe} style={{marginBottom:'2rem'}}>\n        <input className='form__input' type='text' name='recipeName' />\n        <button className='form__button'>Search</button>\n    </form>\n);\n\nexport default Form;","import React from 'react';\n\nimport {Link} from 'react-router-dom';\n\nconst Recipes = props => (\n    <div className='container'>\n        <div className='row'>\n            {props.recipes.map((recipe) => {\n            return (\n                <div key={recipe.recipe.label} className='col-md-4' style={{marginBottom:'2rem'}}>\n                    <div className='recipes__box'>\n                        <img \n                            className='recipe__box-img' \n                            src={recipe.recipe.image} \n                            alt={recipe.recipe.label}>\n                        </img>\n                        <div className='recipe__text'>\n                            <h5 className='recipes__title'>\n                                {recipe.recipe.label.length < 20 ? `${recipe.recipe.label}` : \n                                `${recipe.recipe.label.substring(0, 25)}...`}\n                            </h5>\n                            <p className='recipes__subtitle'>\n                                Source:\n                                <span>{recipe.recipe.source}</span>\n                            </p>\n                        </div>\n                        <button className='recipe_buttons'>\n                            <Link to={{\n                                pathname:`/recipe/${recipe.recipe.label}`,\n                                state: {recipe: recipe.recipe.label}\n                            }}>View Recipe</Link>\n                        </button>\n                    </div>\n                </div>\n            );\n            }) }\n        </div>\n    </div>\n);\n\nexport default Recipes;","import React, {Component} from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nconst APP_ID = '4327c824';\nconst APP_KEY = '57824ae7544369a3c67c79a495bf48d0';\n\nclass App extends Component {\n  state = {\n    recipes: []\n  }\n\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(`https://api.edamam.com/search?q=${recipeName}&app_id=${APP_ID}&app_key=${APP_KEY}`); // The API Hamza used, Food2Fork is no longer available, so I am using Edamam API here.\n\n    const data = await api_call.json();\n    this.setState({ recipes: data.hits });\n    console.log(this.state.recipes);\n  }\n\n  componentDidMount = () => {\n    const json = localStorage.getItem('recipes');\n    const recipes = JSON.parse(json) || [];\n    this.setState({recipes}); // same as this.setState({recipes: recipes});\n  }\n\n  // As soon as a component updates (e.g., when the state changes), whatever's inside this ComponentDidUpdate will run.\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem('recipes', recipes); // Assign to local storage\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst APP_ID = 'ca890d5b';\nconst APP_KEY = 'ace12022edc035fe6eb277d959a67755';\n\n// Class-based component\nclass Recipe extends React.Component {\n    state = {\n        activeRecipe: []\n    }\n    componentDidMount = async () => {\n        const title = this.props.location.state.recipe;\n        const req = await fetch\n        (`https://api.edamam.com/search?q=${title}&app_id=${APP_ID}&app_key=${APP_KEY}`); \n        // The API Hamza used, Food2Fork is no longer available, so I am using Edamam API here.\n    \n        const res = await req.json();\n        this.setState({activeRecipe: res.hits[0]});\n        console.log(this.state.activeRecipe);\n    }\n    render() {\n        const recipe = this.state.activeRecipe;\n        return (\n            <div className='container'>\n                { this.state.activeRecipe.length !== 0 &&\n                    <div className='active-recipe'>\n                        <img className='active-recipe__img' src={recipe.recipe.image} alt={recipe.recipe.label}></img>\n                        <h3 className='active-recipe__title'>{recipe.recipe.label}</h3>\n                        <h4 className='active-recipe__publisher'>\n                            Source: <span>{recipe.recipe.source}</span>\n                        </h4>\n                        <p className='active-recipe__website'>\n                            Website: <span><a href={recipe.url}>{recipe.recipe.url}</a></span>\n                        </p>\n                        <button className='active-recipe__button'>\n                            <Link to='/'>Go Home</Link>\n                        </button>\n                    </div>\n                }\n            </div>\n        );\n    }\n};\n\nexport default Recipe;","import React from 'react';\nimport {HashRouter, Switch, Route} from 'react-router-dom';\n\nimport App from '../App';\nimport Recipe from './Recipe';\n\nconst Router = () => (\n    <HashRouter>\n        <Switch>\n            <Route path='/' component={App} exact />\n            <Route path='/recipe/:label' component={Recipe} />\n        </Switch>\n    </HashRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}